# [ doc = "GPIO pin interrupt" ]

# [ repr ( C ) ] pub struct GpioPinInt { # [ doc = "0x00 - Pin Interrupt Mode register" ] pub isel : Isel , # [ doc = "0x04 - Pin Interrupt Enable (Rising) register" ] pub ienr : Ienr , # [ doc = "0x08 - Set Pin Interrupt Enable (Rising) register" ] pub sienr : Sienr , # [ doc = "0x0c - Clear Pin Interrupt Enable (Rising) register" ] pub cienr : Cienr , # [ doc = "0x10 - Pin Interrupt Enable Falling Edge / Active Level register" ] pub ienf : Ienf , # [ doc = "0x14 - Set Pin Interrupt Enable Falling Edge / Active Level register" ] pub sienf : Sienf , # [ doc = "0x18 - Clear Pin Interrupt Enable Falling Edge / Active Level address" ] pub cienf : Cienf , # [ doc = "0x1c - Pin Interrupt Rising Edge register" ] pub rise : Rise , # [ doc = "0x20 - Pin Interrupt Falling Edge register" ] pub fall : Fall , # [ doc = "0x24 - Pin Interrupt Status register" ] pub ist : Ist }

# [ repr ( C ) ] pub struct Isel { register : :: volatile_register :: RW < u32 > }

impl Isel { pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & IselR , & 'w mut IselW ) -> & 'w mut IselW , { let bits = self . register . read ( ) ; let r = IselR { bits : bits } ; let mut w = IselW { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } pub fn read ( & self ) -> IselR { IselR { bits : self . register . read ( ) } } pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut IselW ) -> & mut IselW , { let mut w = IselW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct IselR { bits : u32 , }

impl IselR { # [ doc = "Bit 0 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode0 ( & self ) -> bool { const OFFSET : u8 = 0u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 1 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode1 ( & self ) -> bool { const OFFSET : u8 = 1u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 2 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode2 ( & self ) -> bool { const OFFSET : u8 = 2u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 3 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode3 ( & self ) -> bool { const OFFSET : u8 = 3u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 4 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode4 ( & self ) -> bool { const OFFSET : u8 = 4u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 5 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode5 ( & self ) -> bool { const OFFSET : u8 = 5u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 6 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode6 ( & self ) -> bool { const OFFSET : u8 = 6u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 7 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode7 ( & self ) -> bool { const OFFSET : u8 = 7u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & self ) -> u32 { const MASK : u32 = 16777215 ; const OFFSET : u8 = 8u8 ; ( ( self . bits >> OFFSET ) & MASK ) as u32 } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct IselW { bits : u32 , }

impl IselW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { IselW { bits : 0 } } # [ doc = "Bit 0 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive" ] pub fn pmode7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }

# [ repr ( C ) ] pub struct Ienr { register : :: volatile_register :: RW < u32 > }

impl Ienr { pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & IenrR , & 'w mut IenrW ) -> & 'w mut IenrW , { let bits = self . register . read ( ) ; let r = IenrR { bits : bits } ; let mut w = IenrW { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } pub fn read ( & self ) -> IenrR { IenrR { bits : self . register . read ( ) } } pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut IenrW ) -> & mut IenrW , { let mut w = IenrW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct IenrR { bits : u32 , }

impl IenrR { # [ doc = "Bit 0 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl0 ( & self ) -> bool { const OFFSET : u8 = 0u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 1 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl1 ( & self ) -> bool { const OFFSET : u8 = 1u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 2 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl2 ( & self ) -> bool { const OFFSET : u8 = 2u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 3 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl3 ( & self ) -> bool { const OFFSET : u8 = 3u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 4 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl4 ( & self ) -> bool { const OFFSET : u8 = 4u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 5 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl5 ( & self ) -> bool { const OFFSET : u8 = 5u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 6 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl6 ( & self ) -> bool { const OFFSET : u8 = 6u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 7 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl7 ( & self ) -> bool { const OFFSET : u8 = 7u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & self ) -> u32 { const MASK : u32 = 16777215 ; const OFFSET : u8 = 8u8 ; ( ( self . bits >> OFFSET ) & MASK ) as u32 } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct IenrW { bits : u32 , }

impl IenrW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { IenrW { bits : 0 } } # [ doc = "Bit 0 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt." ] pub fn enrl7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }

# [ repr ( C ) ] pub struct Sienr { register : :: volatile_register :: WO < u32 > }

impl Sienr { pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut SienrW ) -> & mut SienrW , { let mut w = SienrW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct SienrW { bits : u32 , }

impl SienrW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { SienrW { bits : 0 } } # [ doc = "Bit 0 - Ones written to this address set bits in the PINTEN_R, thus enabling interrupts. Bit n sets bit n in the PINTEN_R register. 0 = No operation. 1 = Enable rising edge or level interrupt." ] pub fn setenrl0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Ones written to this address set bits in the PINTEN_R, thus enabling interrupts. Bit n sets bit n in the PINTEN_R register. 0 = No operation. 1 = Enable rising edge or level interrupt." ] pub fn setenrl1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Ones written to this address set bits in the PINTEN_R, thus enabling interrupts. Bit n sets bit n in the PINTEN_R register. 0 = No operation. 1 = Enable rising edge or level interrupt." ] pub fn setenrl2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Ones written to this address set bits in the PINTEN_R, thus enabling interrupts. Bit n sets bit n in the PINTEN_R register. 0 = No operation. 1 = Enable rising edge or level interrupt." ] pub fn setenrl3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Ones written to this address set bits in the PINTEN_R, thus enabling interrupts. Bit n sets bit n in the PINTEN_R register. 0 = No operation. 1 = Enable rising edge or level interrupt." ] pub fn setenrl4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Ones written to this address set bits in the PINTEN_R, thus enabling interrupts. Bit n sets bit n in the PINTEN_R register. 0 = No operation. 1 = Enable rising edge or level interrupt." ] pub fn setenrl5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Ones written to this address set bits in the PINTEN_R, thus enabling interrupts. Bit n sets bit n in the PINTEN_R register. 0 = No operation. 1 = Enable rising edge or level interrupt." ] pub fn setenrl6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Ones written to this address set bits in the PINTEN_R, thus enabling interrupts. Bit n sets bit n in the PINTEN_R register. 0 = No operation. 1 = Enable rising edge or level interrupt." ] pub fn setenrl7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }

# [ repr ( C ) ] pub struct Cienr { register : :: volatile_register :: WO < u32 > }

impl Cienr { pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut CienrW ) -> & mut CienrW , { let mut w = CienrW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct CienrW { bits : u32 , }

impl CienrW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { CienrW { bits : 0 } } # [ doc = "Bit 0 - Ones written to this address clear bits in the IENR, thus disabling the interrupts. Bit n clears bit n in the IENR register. 0 = No operation. 1 = Disable rising edge or level interrupt." ] pub fn cenrl0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Ones written to this address clear bits in the IENR, thus disabling the interrupts. Bit n clears bit n in the IENR register. 0 = No operation. 1 = Disable rising edge or level interrupt." ] pub fn cenrl1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Ones written to this address clear bits in the IENR, thus disabling the interrupts. Bit n clears bit n in the IENR register. 0 = No operation. 1 = Disable rising edge or level interrupt." ] pub fn cenrl2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Ones written to this address clear bits in the IENR, thus disabling the interrupts. Bit n clears bit n in the IENR register. 0 = No operation. 1 = Disable rising edge or level interrupt." ] pub fn cenrl3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Ones written to this address clear bits in the IENR, thus disabling the interrupts. Bit n clears bit n in the IENR register. 0 = No operation. 1 = Disable rising edge or level interrupt." ] pub fn cenrl4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Ones written to this address clear bits in the IENR, thus disabling the interrupts. Bit n clears bit n in the IENR register. 0 = No operation. 1 = Disable rising edge or level interrupt." ] pub fn cenrl5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Ones written to this address clear bits in the IENR, thus disabling the interrupts. Bit n clears bit n in the IENR register. 0 = No operation. 1 = Disable rising edge or level interrupt." ] pub fn cenrl6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Ones written to this address clear bits in the IENR, thus disabling the interrupts. Bit n clears bit n in the IENR register. 0 = No operation. 1 = Disable rising edge or level interrupt." ] pub fn cenrl7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }

# [ repr ( C ) ] pub struct Ienf { register : :: volatile_register :: RW < u32 > }

impl Ienf { pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & IenfR , & 'w mut IenfW ) -> & 'w mut IenfW , { let bits = self . register . read ( ) ; let r = IenfR { bits : bits } ; let mut w = IenfW { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } pub fn read ( & self ) -> IenfR { IenfR { bits : self . register . read ( ) } } pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut IenfW ) -> & mut IenfW , { let mut w = IenfW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct IenfR { bits : u32 , }

impl IenfR { # [ doc = "Bit 0 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf0 ( & self ) -> bool { const OFFSET : u8 = 0u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 1 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf1 ( & self ) -> bool { const OFFSET : u8 = 1u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 2 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf2 ( & self ) -> bool { const OFFSET : u8 = 2u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 3 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf3 ( & self ) -> bool { const OFFSET : u8 = 3u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 4 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf4 ( & self ) -> bool { const OFFSET : u8 = 4u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 5 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf5 ( & self ) -> bool { const OFFSET : u8 = 5u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 6 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf6 ( & self ) -> bool { const OFFSET : u8 = 6u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 7 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf7 ( & self ) -> bool { const OFFSET : u8 = 7u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & self ) -> u32 { const MASK : u32 = 16777215 ; const OFFSET : u8 = 8u8 ; ( ( self . bits >> OFFSET ) & MASK ) as u32 } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct IenfW { bits : u32 , }

impl IenfW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { IenfW { bits : 0 } } # [ doc = "Bit 0 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH." ] pub fn enaf7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }

# [ repr ( C ) ] pub struct Sienf { register : :: volatile_register :: WO < u32 > }

impl Sienf { pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut SienfW ) -> & mut SienfW , { let mut w = SienfW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct SienfW { bits : u32 , }

impl SienfW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { SienfW { bits : 0 } } # [ doc = "Bit 0 - Ones written to this address set bits in the IENF, thus enabling interrupts. Bit n sets bit n in the IENF register. 0 = No operation. 1 = Select HIGH-active interrupt or enable falling edge interrupt." ] pub fn setenaf0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Ones written to this address set bits in the IENF, thus enabling interrupts. Bit n sets bit n in the IENF register. 0 = No operation. 1 = Select HIGH-active interrupt or enable falling edge interrupt." ] pub fn setenaf1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Ones written to this address set bits in the IENF, thus enabling interrupts. Bit n sets bit n in the IENF register. 0 = No operation. 1 = Select HIGH-active interrupt or enable falling edge interrupt." ] pub fn setenaf2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Ones written to this address set bits in the IENF, thus enabling interrupts. Bit n sets bit n in the IENF register. 0 = No operation. 1 = Select HIGH-active interrupt or enable falling edge interrupt." ] pub fn setenaf3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Ones written to this address set bits in the IENF, thus enabling interrupts. Bit n sets bit n in the IENF register. 0 = No operation. 1 = Select HIGH-active interrupt or enable falling edge interrupt." ] pub fn setenaf4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Ones written to this address set bits in the IENF, thus enabling interrupts. Bit n sets bit n in the IENF register. 0 = No operation. 1 = Select HIGH-active interrupt or enable falling edge interrupt." ] pub fn setenaf5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Ones written to this address set bits in the IENF, thus enabling interrupts. Bit n sets bit n in the IENF register. 0 = No operation. 1 = Select HIGH-active interrupt or enable falling edge interrupt." ] pub fn setenaf6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Ones written to this address set bits in the IENF, thus enabling interrupts. Bit n sets bit n in the IENF register. 0 = No operation. 1 = Select HIGH-active interrupt or enable falling edge interrupt." ] pub fn setenaf7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }

# [ repr ( C ) ] pub struct Cienf { register : :: volatile_register :: WO < u32 > }

impl Cienf { pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut CienfW ) -> & mut CienfW , { let mut w = CienfW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct CienfW { bits : u32 , }

impl CienfW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { CienfW { bits : 0 } } # [ doc = "Bit 0 - Ones written to this address clears bits in the IENF, thus disabling interrupts. Bit n clears bit n in the IENF register. 0 = No operation. 1 = LOW-active interrupt selected or falling edge interrupt disabled." ] pub fn cenaf0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Ones written to this address clears bits in the IENF, thus disabling interrupts. Bit n clears bit n in the IENF register. 0 = No operation. 1 = LOW-active interrupt selected or falling edge interrupt disabled." ] pub fn cenaf1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Ones written to this address clears bits in the IENF, thus disabling interrupts. Bit n clears bit n in the IENF register. 0 = No operation. 1 = LOW-active interrupt selected or falling edge interrupt disabled." ] pub fn cenaf2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Ones written to this address clears bits in the IENF, thus disabling interrupts. Bit n clears bit n in the IENF register. 0 = No operation. 1 = LOW-active interrupt selected or falling edge interrupt disabled." ] pub fn cenaf3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Ones written to this address clears bits in the IENF, thus disabling interrupts. Bit n clears bit n in the IENF register. 0 = No operation. 1 = LOW-active interrupt selected or falling edge interrupt disabled." ] pub fn cenaf4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Ones written to this address clears bits in the IENF, thus disabling interrupts. Bit n clears bit n in the IENF register. 0 = No operation. 1 = LOW-active interrupt selected or falling edge interrupt disabled." ] pub fn cenaf5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Ones written to this address clears bits in the IENF, thus disabling interrupts. Bit n clears bit n in the IENF register. 0 = No operation. 1 = LOW-active interrupt selected or falling edge interrupt disabled." ] pub fn cenaf6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Ones written to this address clears bits in the IENF, thus disabling interrupts. Bit n clears bit n in the IENF register. 0 = No operation. 1 = LOW-active interrupt selected or falling edge interrupt disabled." ] pub fn cenaf7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }

# [ repr ( C ) ] pub struct Rise { register : :: volatile_register :: RW < u32 > }

impl Rise { pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & RiseR , & 'w mut RiseW ) -> & 'w mut RiseW , { let bits = self . register . read ( ) ; let r = RiseR { bits : bits } ; let mut w = RiseW { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } pub fn read ( & self ) -> RiseR { RiseR { bits : self . register . read ( ) } } pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut RiseW ) -> & mut RiseW , { let mut w = RiseW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct RiseR { bits : u32 , }

impl RiseR { # [ doc = "Bit 0 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet0 ( & self ) -> bool { const OFFSET : u8 = 0u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 1 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet1 ( & self ) -> bool { const OFFSET : u8 = 1u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 2 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet2 ( & self ) -> bool { const OFFSET : u8 = 2u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 3 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet3 ( & self ) -> bool { const OFFSET : u8 = 3u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 4 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet4 ( & self ) -> bool { const OFFSET : u8 = 4u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 5 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet5 ( & self ) -> bool { const OFFSET : u8 = 5u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 6 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet6 ( & self ) -> bool { const OFFSET : u8 = 6u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 7 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet7 ( & self ) -> bool { const OFFSET : u8 = 7u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & self ) -> u32 { const MASK : u32 = 16777215 ; const OFFSET : u8 = 8u8 ; ( ( self . bits >> OFFSET ) & MASK ) as u32 } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct RiseW { bits : u32 , }

impl RiseW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { RiseW { bits : 0 } } # [ doc = "Bit 0 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin." ] pub fn rdet7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }

# [ repr ( C ) ] pub struct Fall { register : :: volatile_register :: RW < u32 > }

impl Fall { pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & FallR , & 'w mut FallW ) -> & 'w mut FallW , { let bits = self . register . read ( ) ; let r = FallR { bits : bits } ; let mut w = FallW { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } pub fn read ( & self ) -> FallR { FallR { bits : self . register . read ( ) } } pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut FallW ) -> & mut FallW , { let mut w = FallW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct FallR { bits : u32 , }

impl FallR { # [ doc = "Bit 0 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet0 ( & self ) -> bool { const OFFSET : u8 = 0u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 1 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet1 ( & self ) -> bool { const OFFSET : u8 = 1u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 2 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet2 ( & self ) -> bool { const OFFSET : u8 = 2u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 3 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet3 ( & self ) -> bool { const OFFSET : u8 = 3u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 4 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet4 ( & self ) -> bool { const OFFSET : u8 = 4u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 5 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet5 ( & self ) -> bool { const OFFSET : u8 = 5u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 6 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet6 ( & self ) -> bool { const OFFSET : u8 = 6u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 7 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet7 ( & self ) -> bool { const OFFSET : u8 = 7u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & self ) -> u32 { const MASK : u32 = 16777215 ; const OFFSET : u8 = 8u8 ; ( ( self . bits >> OFFSET ) & MASK ) as u32 } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct FallW { bits : u32 , }

impl FallW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { FallW { bits : 0 } } # [ doc = "Bit 0 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin." ] pub fn fdet7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }

# [ repr ( C ) ] pub struct Ist { register : :: volatile_register :: RW < u32 > }

impl Ist { pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & IstR , & 'w mut IstW ) -> & 'w mut IstW , { let bits = self . register . read ( ) ; let r = IstR { bits : bits } ; let mut w = IstW { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } pub fn read ( & self ) -> IstR { IstR { bits : self . register . read ( ) } } pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut IstW ) -> & mut IstW , { let mut w = IstW :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct IstR { bits : u32 , }

impl IstR { # [ doc = "Bit 0 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat0 ( & self ) -> bool { const OFFSET : u8 = 0u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 1 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat1 ( & self ) -> bool { const OFFSET : u8 = 1u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 2 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat2 ( & self ) -> bool { const OFFSET : u8 = 2u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 3 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat3 ( & self ) -> bool { const OFFSET : u8 = 3u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 4 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat4 ( & self ) -> bool { const OFFSET : u8 = 4u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 5 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat5 ( & self ) -> bool { const OFFSET : u8 = 5u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 6 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat6 ( & self ) -> bool { const OFFSET : u8 = 6u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bit 7 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat7 ( & self ) -> bool { const OFFSET : u8 = 7u8 ; self . bits & ( 1 << OFFSET ) != 0 } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & self ) -> u32 { const MASK : u32 = 16777215 ; const OFFSET : u8 = 8u8 ; ( ( self . bits >> OFFSET ) & MASK ) as u32 } }

# [ derive ( Clone , Copy ) ] # [ repr ( C ) ] pub struct IstW { bits : u32 , }

impl IstW { # [ doc = r" Reset value" ] pub fn reset_value ( ) -> Self { IstW { bits : 0 } } # [ doc = "Bit 0 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat0 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 0u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 1 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat1 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 1u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 2 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat2 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 2u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 3 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat3 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 3u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 4 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat4 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 4u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 5 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat5 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 5u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 6 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat6 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 6u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bit 7 - Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the PINTENT_F register)." ] pub fn pstat7 ( & mut self , value : bool ) -> & mut Self { const OFFSET : u8 = 7u8 ; if value { self . bits |= 1 << OFFSET ; } else { self . bits &= ! ( 1 << OFFSET ) ; } self } # [ doc = "Bits 8:31 - Reserved." ] pub fn reserved ( & mut self , value : u32 ) -> & mut Self { const OFFSET : u8 = 8u8 ; const MASK : u32 = 16777215 ; self . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self } }
